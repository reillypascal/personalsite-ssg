---
layout: blogpostlayout.liquid
root_folder: ../../../..
title: Do Read the Comments
description: A writeup of using Netlify serverless functions and Supabase to code a comments section on a static site
canonical_url: https://reillyspitzfaden.com/posts/2024/01/do-read-the-comments
url: posts/2024/01/do-read-the-comments
date: 2024-01-14
categories: ["webdev", "programming", "blog"]
tags: post
---

<!-- Code highlighting CSS -->
<link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'" />
<noscript>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css" />
</noscript>

<p>My blog now has a comment section! Let's talk about how I made it.</p> 
<p>It uses the <a href="https://supabase.com/">Supabase</a> Postgres database, which bills itself as an "open-source Firebase alternative." There are a number of ways of communicating with the database. I chose the <a href="https://github.com/supabase/supabase-js">supabase-js</a> JavaScript client since I'm familiar with JS, and because I wanted to use Netlify's <a href="https://www.netlify.com/blog/intro-to-serverless-functions/">"serverless" function</a> capabilities to run the code that communicates with the database.</p>

<p>I considered several ways of getting the comments to display, including embedding a server-side-rendered page in an &lt;iframe&gt;, and using the pre-made "<a href="https://jsrepos.com/repo/a-blazing-fast-lightweight-and-open-source-comment-system-for-your-static-website-blogs-powered-by-supabase">SupaComments</a>" library, but it actually turned out to be easier to just do it myself with vanilla JavaScript. For the full code, see the <a href="https://github.com/reillypascal/personalsite/tree/main/reillyspitzfaden/netlify/functions">Netlify functions</a>, <a href="https://github.com/reillypascal/personalsite/blob/main/reillyspitzfaden/styles/scripts.js">global JS file</a>, and the <a href="https://github.com/reillypascal/personalsite/tree/main/reillyspitzfaden/blog">blog posts'</a> HTML files on GitHub. I'll walk through some of the most relevant parts here.</p> 

<br />
<h3>Handling Comment Submissions</h3>
<p>In the form submission handler function, I make the form data into a FormData object. I then retrieve the commenter's name, email, and comment, as well as the URL of the blog post on which they're commenting. Note that in the code examples, I have left out the DOM-manipulating code to focus on handling the comment data.</p>

<pre><code class="language-js" >// (from scripts.js)
// submit conmment handler - thisPostURL variable is 
// defined in the page that calls this function
const handleSubmitComment = async (event) => {
    event.preventDefault();

    // ... reset "Comment submitted!" message, if one exists

    // get form data
    const myForm = event.target;
    const formData = new FormData(myForm);
    // retrieve the needed fields from the FormData object
    const formObject = {
        name: formData.get("name"),
        email: formData.get("email"),
        postURL: thisPostURL,
        comment: formData.get("comment")
    };
    // ...</code></pre>

<p>Since I didn't want the extra work of making a new table in my database every time I made a new blog post, I have all the comments go to a single table. Each blog post tags the comments on it with the post's URL, and uses that URL to retrieve only the appropriate comments.</p>

<p>After the comment is formatted into an object, I use the <code class="language-js" >fetch()</code> API to send the comment data to the serverless function in the body of a POST request.</p>


    <pre><code class="language-js" >    // ... (continued from above)
    // call the serverless function and send it 
    // formObject in the body of the request
    const response = await fetch('/.netlify/functions/set_comment', {
        method: "POST",
        body: JSON.stringify(formObject)
    })
    // ...</code></pre>

<p>From there, the rest of the handler prints either a success or error message under the comment submission form.</p>

    <pre><code class="language-js" >    // ... (continued from above)
    .then(response => {
        // ... reset form to indicate comment submitted,
        // and print success message below
    })
    .catch(error => {
        // ... reset form to indicate comment submitted, 
        // and print error message below
    });
};</code></pre>

<pre><code class="language-js" >// retrieve conmment handler - thisPostURL is defined in page
const handleGetComments = async (event) => {
    event.preventDefault();

    // ... erase any previously-displayed comments, load spinner .gif

    // call serverless function
    const response = await fetch('/.netlify/functions/get_comment', {
        method:'POST',
        body: JSON.stringify({
            postURL: thisPostURL
        })
    })
    // .json() returns a promise too, so there needs to be another .then()
    .then(response => response.json())
    .then(json => {
        // ... clear the spinner; test if there are any comments 
        // in the returned list; if so, iterate through them 
        // and add the appropriate HTML/text
    })
    .catch(error => {
        // ... clear the spinner; display an error message
    });
}</code></pre>

<br />
<h3>Supabase: Storing and Retrieving Comments</h3>
<p>The serverless functions to interface with Supabase need the 'dotenv' and 'supabase-js' Node packages, which are required from index.js in the root directory.</p>
<pre><code class="language-js" >require('dotenv').config();
require('@supabase/supabase-js');</code></pre>
<p>In the function files, which are in netlify/functions&mdash;the default directory Netlify specifies&mdash;I get the URL and anon key for the database from Netlify's .env variables. Netlify lets you specify those from your site's console, so it's easy to keep them secure.</p>
<pre><code class="language-js" >const {
    DATABASE_URL,
    SUPABASE_SERVICE_API_KEY
} = process.env;</code></pre>
<p>The meat of the setter function is the <code class="language-js" >.from()</code> method, which accesses the desired table, and the <code class="language-js" >.insert()</code> method, which adds the new entry. These are specified by the Supabase <a href="https://zone-www-dot-lmn02xr2l-supabase.vercel.app/docs/reference/javascript/select">API</a>. Netlify uses the ES modules default export syntax for the serverless functions, and the functions are automatically named after the files that contain them&mdash;<code class="language-js" >set_comment</code> and <code class="language-js" >get_comment</code> in my case.</p>

<pre><code class="language-js" >// create supabase client using url/anon key from Netlify env variables
const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(DATABASE_URL, SUPABASE_SERVICE_API_KEY);

// uses ES modules syntax for default export
exports.handler = async (event, context, callback) => {
    let data
    try {
        // the result of createClient() can access the database
        data = await supabase
        // 'comments' is the name of the table 
        // within my database; .from() selects that
        .from('comments')
        // .insert() takes an array with one or more objects whose keys correspond
        // to those in the table, and adds each object as a new row to the table
        .insert([
            {   
                name: JSON.parse(event.body).name,
                email: JSON.parse(event.body).email,
                postURL: JSON.parse(event.body).postURL,
                comment: JSON.parse(event.body).comment,
                created_at: ((new Date()).toISOString()).toLocaleString('en-US'),
                show: true
            }
        ])
    } catch (e) {
        return {
            statusCode: 500,
            body: JSON.stringify({
                error: e.message
            })
        }
    }
    return {
        statusCode: 200,
        body: JSON.stringify(data)
    };
}</code></pre>

<p>The getter function works similarly, but uses the <code class="language-js" >.select()</code> and <code class="language-js" >.eq()</code> methods. These specify the columns to return and a matching condition to indicate whether or not to return a row, respectively.</p>

<pre><code class="language-js" >exports.handler = async (event, context, callback) => {
    let returnVals
    try {
        returnVals = await supabase
        // as in set_comments, retrieves 'comments' table
        .from('comments')
        // selects the desired columns in each row
        .select('name, email, comment, created_at')
        // selects only the rows containing comments 
        // made at the blog post's URL
        .eq('postURL', JSON.parse(event.body).postURL)
        
    } catch (e) {
        return {
            statusCode: 500,
            body: JSON.stringify({
              error: e.message
            })
        }
    }
    return {
        statusCode: 200,
        body: JSON.stringify(returnVals.data)
    };
}</code></pre>
<br />
<h3>Conclusions</h3>
<p>Some of the challenges I had in this project:</p>
<ul>
    <li>It took me some trial and error to conceptualize exactly what the serverless functions needed to send back and forth with my site/Netlify.</li>
    <li>I had previously directly interfaced form submissions with Netlify for my contact form, but I needed to do a bit of reading to understand exactly how to get the information from the form into a format suitable to send in an HTTP POST request.</li>
</ul>
<p>One of my takeaways from this was that I should do more backend stuff. I haven't done much before, but I find it's a lot of fun to connect things together and make them communicate. Maybe a future project could include making my own database on my Raspberry Pi and setting up more complex interactions with it.</p>
<p>Thanks for reading this far! In the near term, I'm planning to make an RSS feed for this blog&mdash;look for a similar write-up when I do that.</p>

{% postfooter %}

<!-- basic and JavaScript highlighting from "highlight.js" library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/javascript.min.js"></script>

<script>hljs.highlightAll();</script>
